# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
# entre 1 y el n√∫mero que indique el usuario 

def factorial_recursivo(numero):
    """
    Calcula el factorial de un n√∫mero entero no negativo de forma recursiva.

    Args:
        numero (int): El n√∫mero del cual se quiere calcular el factorial.
                      Debe ser un entero no negativo.

    Returns:
        int: El factorial del n√∫mero.
             Retorna 1 si el n√∫mero es 0.
             Retorna None si el n√∫mero es negativo (manejo de error b√°sico).
    """
    # CASO BASE: Si el n√∫mero es 0, el factorial es 1.
    if numero == 0:
        return 1
    # CASO ESPECIAL: Si el n√∫mero es negativo, el factorial no est√° definido.
    elif numero < 0:
        print("El factorial no est√° definido para n√∫meros negativos.")
        return None
    # PASO RECURSIVO: Si el n√∫mero es mayor que 0,
    else:
        return numero * factorial_recursivo(numero - 1)


def calcular_y_mostrar_factoriales():
    """
    Pide al usuario un n√∫mero y luego calcula y muestra
    el factorial de cada entero desde 1 hasta ese n√∫mero.
    """
    while True: # Bucle para asegurar que el usuario ingrese un n√∫mero v√°lido
        try:
            num = int(input("Ingresa un n√∫mero entero positivo : "))
            if num < 1:
                print("Por favor, ingresa un n√∫mero entero positivo (mayor o igual a 1).")
            else:
                break # Salimos del bucle si el n√∫mero es v√°lido
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    print(f"\nCalculando factoriales desde 1 hasta {num}:\n")

    # Iteramos desde 1 hasta el n√∫mero ingresado por el usuario (inclusive)
    for i in range(1, num + 1):
        resultado_factorial = factorial_recursivo(i)
        if resultado_factorial is not None:
            print(f"El factorial de {i}! es: {resultado_factorial}")
        else:
            print(f"No se pudo calcular el factorial de {i}.")

# Llama a la funci√≥n principal para que todo el proceso inicie
# Esta l√≠nea estaba comentada, ¬°ahora est√° activa!
calcular_y_mostrar_factoriales()

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario 
# especifique. 

def fibonacci_recursivo(posicion):
    """
    Calcula el valor de la serie de Fibonacci en la posici√≥n indicada
    de forma recursiva.

    Args:
        posicion (int): La posici√≥n en la serie de Fibonacci (debe ser un entero no negativo).

    Returns:
        int: El valor de Fibonacci en esa posici√≥n.
             Retorna None si la posici√≥n es negativa.
    """
    # Caso base 1: Si la posici√≥n es 0, el valor de Fibonacci es 0.
    if posicion == 0:
        return 0
    # Caso base 2: Si la posici√≥n es 1, el valor de Fibonacci es 1.
    elif posicion == 1:
        return 1
    # Manejo de error: Si la posici√≥n es negativa, la serie de Fibonacci no est√° definida.
    elif posicion < 0:
        print("La posici√≥n no puede ser un n√∫mero negativo para la serie de Fibonacci.")
        return None
    # Paso recursivo: Para cualquier otra posici√≥n 'n', el valor es la suma de
    # los valores de Fibonacci en las posiciones (n-1) y (n-2).
    else:
        # Aqu√≠ la funci√≥n se llama a s√≠ misma dos veces, con 'posicion - 1' y 'posicion - 2'.
        return fibonacci_recursivo(posicion - 1) + fibonacci_recursivo(posicion - 2)
    
    # Parte 2: Mostrar la serie completa hasta la posici√≥n especificada por el usuario

def mostrar_serie_fibonacci_completa():
    """
    Pide al usuario una posici√≥n y luego muestra la serie de Fibonacci
    completa hasta esa posici√≥n.
    """
    while True: # Bucle para asegurar que el usuario ingrese un n√∫mero v√°lido
        try:
            num = int(input("Ingresa la posici√≥n de Fibonacci : "))
            if num < 0:
                print("Por favor, ingresa una posici√≥n no negativa.")
            else:
                break # Salimos del bucle si la posici√≥n es v√°lida
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    print(f"\nSerie de Fibonacci hasta la posici√≥n {num}:\n")
    print("Posici√≥n | Valor")
    print("-------- | ------")

    # Iteramos desde la posici√≥n 0 hasta la posici√≥n l√≠mite (inclusive)
    for i in range(num + 1): # range(n) va de 0 a n-1, por eso sumamos 1 para incluir el l√≠mite
        valor_fib = fibonacci_recursivo(i)
        if valor_fib is not None: # Si el valor no es None (manejo de error)
            print(f"   {i:<5} | {valor_fib}") # Formato para alinear los n√∫meros
        else:
            print(f"Error al calcular Fibonacci en posici√≥n {i}.") # En caso de que fibonacci_recursivo retorne None

# Ejecutamos la funci√≥n principal para mostrar la serie
mostrar_serie_fibonacci_completa()

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
# exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un 
# algoritmo general. 

def potencia_recursiva(base, exponente):
    """
    Calcula la potencia de un n√∫mero base elevado a un exponente de forma recursiva.

    Args:
        base (int/float): El n√∫mero base.
        exponente (int): El exponente (debe ser un entero no negativo para esta implementaci√≥n simple).

    Returns:
        int/float: El resultado de la base elevada al exponente.
                   Retorna None si el exponente es negativo (manejo de error b√°sico para este ejemplo).
    """
    # Caso base 1: Cualquier n√∫mero elevado a la potencia de 0 es 1.
    # Esta es la condici√≥n que detiene la recursi√≥n cuando el exponente llega a 0.
    if exponente == 0:
        return 1
    # Caso especial: Si el exponente es negativo, no lo manejamos con esta f√≥rmula recursiva simple.
    # Un exponente negativo significa 1 / (base^|exponente|).
    elif exponente < 0:
        print("Esta funci√≥n recursiva simple no maneja exponentes negativos.")
        print("Para un exponente negativo 'm', el resultado ser√≠a 1 / (base ** abs(m)).")
        return None
    # Paso recursivo: Si el exponente es mayor que 0, aplicamos la f√≥rmula n^m = n * n^(m-1).
    else:
        # Aqu√≠ la funci√≥n se llama a s√≠ misma con el exponente decrementado.
        return base * potencia_recursiva(base, exponente - 1)
    
    # Parte 2: Probar la funci√≥n en un algoritmo general

def probar_calculo_potencia():
    """
    Pide al usuario una base y un exponente, y luego calcula y muestra
    la potencia utilizando la funci√≥n recursiva.
    """
    # Pedir la base
    while True:
        try:
            base = float(input("Ingresa el n√∫mero base (puede ser decimal): "))
            break
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero para la base.")

    # Pedir el exponente
    while True:
        try:
            exponente = int(input("Ingresa el exponente (debe ser un n√∫mero entero no negativo): "))
            if exponente < 0:
                print("Por favor, ingresa un exponente entero no negativo para esta implementaci√≥n.")
            else:
                break
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero para el exponente.")

    print(f"\nCalculando {base} elevado a la potencia de {exponente}...\n")

    # Llamamos a nuestra funci√≥n recursiva
    resultado = potencia_recursiva(base, exponente)

    # Mostramos el resultado si se pudo calcular
    if resultado is not None:
        print(f"El resultado de {base}^{exponente} es: {resultado}")
    else:
        print("No se pudo calcular la potencia debido a un exponente no compatible.")

# Ejecutamos la funci√≥n principal para probar el c√°lculo de potencia

probar_calculo_potencia()

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
# decimal y devuelva su representaci√≥n en binario como una cadena de texto. 

def decimal_a_binario_recursivo(decimal):
    """
    Convierte un n√∫mero entero positivo en base decimal a su representaci√≥n binaria
    como una cadena de texto, utilizando un enfoque recursivo.

    Args:
        decimal (int): El n√∫mero entero positivo en base decimal a convertir.

    Returns:
        str: La representaci√≥n binaria del n√∫mero como una cadena de texto.
             Retorna una cadena vac√≠a o un mensaje de error si la entrada no es v√°lida.
    """
    # Manejo de casos de entrada no v√°lidos o especiales:
    if not isinstance(decimal, int):
        print("Error: La entrada debe ser un n√∫mero entero.")
        return ""
    if decimal < 0:
        print("Error: Esta funci√≥n solo maneja n√∫meros enteros positivos para la conversi√≥n a binario.")
        return ""
    if decimal == 0:
        # Caso base 1: Si el n√∫mero es 0, su representaci√≥n binaria es "0".
        return "0"
    # Este es el caso base clave para la recursi√≥n cuando el n√∫mero se ha reducido completamente
    # hasta que ya no se puede dividir por 2 para obtener un cociente > 0.
    # En el momento en que el cociente de una divisi√≥n anterior llega a 0,
    # significa que ya hemos procesado todos los d√≠gitos significativos.
    # Es crucial que esta condici√≥n est√© despu√©s de los casos espec√≠ficos 0 y negativos.
    # T√©cnicamente, este caso se maneja impl√≠citamente por el retorno de la cadena vac√≠a
    # en la primera llamada de la recursi√≥n si el n√∫mero finalmente llega a 0 y no se captur√≥ antes.
    # Para ser m√°s expl√≠citos y seguir la l√≥gica de divisi√≥n:
    if decimal == 1:
        return "1" # El √∫ltimo 1 en la divisi√≥n sucesiva.

    # Paso recursivo:
    # 1. Calcular el residuo (ser√° el √∫ltimo d√≠gito binario para este nivel de recursi√≥n).
    residuo = decimal % 2
    # 2. Calcular el cociente (el n√∫mero que se pasa a la siguiente llamada recursiva).
    cociente = decimal // 2  # Usamos divisi√≥n entera //

    # La recursi√≥n sucede aqu√≠:
    # Llamamos a la funci√≥n con el cociente. Cuando esa llamada recursiva retorne,
    # su resultado ser√° la parte "izquierda" del n√∫mero binario.
    # Luego, concatenamos el residuo actual (que es el d√≠gito "derecho" para este paso).
    return decimal_a_binario_recursivo(cociente) + str(residuo)

# Parte 2: Probar la funci√≥n en un algoritmo general

def probar_conversion_decimal_a_binario():
    """
    Pide al usuario un n√∫mero entero positivo decimal y muestra su
    representaci√≥n binaria utilizando la funci√≥n recursiva.
    """
    while True:
        try:
            num_decimal = int(input("Ingresa un n√∫mero entero positivo para convertir a binario: "))
            if num_decimal < 0:
                print("Por favor, ingresa un n√∫mero entero positivo.")
            else:
                break # Salimos del bucle si el n√∫mero es v√°lido
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    print(f"\nConvirtiendo el n√∫mero {num_decimal} (decimal) a binario...\n")

    # Llamamos a nuestra funci√≥n recursiva
    binario_resultante = decimal_a_binario_recursivo(num_decimal)

    # Mostramos el resultado
    if binario_resultante: # Si la cadena no est√° vac√≠a (indicando que no hubo error)
        print(f"La representaci√≥n binaria de {num_decimal} es: {binario_resultante}")
    else:
        # Esto se imprimir√≠a si decimal_a_binario_recursivo retorn√≥ una cadena vac√≠a por error.
        print("No se pudo realizar la conversi√≥n a binario para el n√∫mero ingresado.")

# Ejecutamos la funci√≥n principal para probar la conversi√≥n
probar_conversion_decimal_a_binario()

# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
# lo es. 
#      Requisitos: 
# La soluci√≥n debe ser recursiva. 
# No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    """
    Verifica si una cadena de texto es un pal√≠ndromo de forma recursiva.

    Args:
        palabra (str): La cadena de texto a verificar (sin espacios ni tildes).

    Returns:
        bool: True si la cadena es un pal√≠ndromo, False en caso contrario.
    """
    # 1. CASO BASE:
    # Si la palabra tiene 0 o 1 car√°cter, es un pal√≠ndromo por definici√≥n.
    if len(palabra) <= 1:
        return True

    # 2. PASO RECURSIVO:
    # Verificamos si el primer car√°cter es igual al √∫ltimo car√°cter.
    if palabra[0] == palabra[-1]:
        # Si son iguales, entonces la palabra es un pal√≠ndromo
        # SI Y SOLO SI la subcadena sin el primer y √∫ltimo car√°cter
        # tambi√©n es un pal√≠ndromo.
        # Aqu√≠ es donde ocurre la llamada recursiva.
        return es_palindromo(palabra[1:-1]) # palabra[1:-1] obtiene la subcadena
                                            # desde el segundo car√°cter hasta el pen√∫ltimo.
    else:
        # Si el primer y √∫ltimo car√°cter no son iguales,
        # la palabra no puede ser un pal√≠ndromo.
        return False
    
# Parte 2: Probar la funci√≥n en un algoritmo general

def probar_palindromo():
    """
    Pide al usuario una palabra y verifica si es un pal√≠ndromo
    utilizando la funci√≥n recursiva.
    """
    print("Vamos a verificar si una palabra es un pal√≠ndromo de forma recursiva.")
    print("Recuerda: la palabra debe ser sin espacios ni tildes.")
    print("Ejemplos de pal√≠ndromos: 'reconocer', 'anilina', 'oso'")

    palabra_usuario = input("\nIngresa una palabra: ").strip().lower()
    # .strip() elimina espacios al inicio y final
    # .lower() convierte a min√∫sculas para una comparaci√≥n sin distinci√≥n entre may√∫sculas y min√∫sculas

    # Aqu√≠ llamamos a nuestra funci√≥n recursiva
    if es_palindromo(palabra_usuario):
        print(f"'{palabra_usuario}' ES un pal√≠ndromo.")
    else:
        print(f"'{palabra_usuario}' NO es un pal√≠ndromo.")

# Ejecutamos la funci√≥n principal para probar la verificaci√≥n de pal√≠ndromos

probar_palindromo()

# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
#      Restricciones: 
# No se puede convertir el n√∫mero a string. 
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
# Ejemplos: 
# suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
# suma_digitos(9)      ‚Üí 9 
# suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) 

def suma_digitos(n):
    """
    Calcula la suma de los d√≠gitos de un n√∫mero entero positivo de forma recursiva.

    Restricciones:
    - No se puede convertir el n√∫mero a string.
    - Se usan operaciones matem√°ticas (%, //) y recursi√≥n.

    Args:
        n (int): El n√∫mero entero positivo del cual se sumar√°n los d√≠gitos.

               ¬°ADVERTENCIA!: Esta versi√≥n asume que 'n' ya es un entero.
                               No maneja errores de tipo de dato directamente.

    Returns:
        int: La suma de todos los d√≠gitos del n√∫mero.
             Retorna None si la entrada es negativa (ya que la consigna pide positivos).
    """
    # Manejo de entradas negativas (sigue siendo importante seg√∫n la consigna de "positivo"):
    if n < 0:
        print("Error: La funci√≥n suma_digitos solo acepta n√∫meros enteros positivos.")
        return None

    # CASO BASE:
    # Si el n√∫mero es 0, la suma de sus d√≠gitos es 0.
    if n == 0:
        return 0

    # PASO RECURSIVO:
    # Obtenemos el √∫ltimo d√≠gito del n√∫mero.
    ultimo_digito = n % 10

    # Obtenemos el n√∫mero sin el √∫ltimo d√≠gito.
    numero_sin_ultimo_digito = n // 10

    # Suma el √∫ltimo d√≠gito con la suma recursiva del resto del n√∫mero.
    return ultimo_digito + suma_digitos(numero_sin_ultimo_digito)

# Parte 2: Probar la funci√≥n en un algoritmo general

def probar_suma_digitos():
    """
    Pide al usuario un n√∫mero entero positivo y muestra la suma de sus d√≠gitos
    utilizando la funci√≥n recursiva.
    """
    print("Vamos a calcular la suma de los d√≠gitos de un n√∫mero entero positivo.")

    while True: # Bucle para asegurar una entrada v√°lida
        try:
            numero_ingresado = int(input("\nIngresa un n√∫mero entero positivo: "))
            if numero_ingresado < 0:
                print("Por favor, ingresa un n√∫mero positivo.")
            else:
                break # Salimos del bucle si el n√∫mero es v√°lido
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    # Llamamos a nuestra funci√≥n recursiva
    resultado_suma = suma_digitos(numero_ingresado)

    # Mostramos el resultado si la funci√≥n no retorn√≥ None (por error de entrada)
    if resultado_suma is not None:
        print(f"La suma de los d√≠gitos de {numero_ingresado} es: {resultado_suma}")
    else:
        print("No se pudo calcular la suma debido a una entrada no compatible.")

# Ejecutamos la funci√≥n principal para probar la suma de d√≠gitos

probar_suma_digitos()

# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
# bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
# √∫ltimo nivel con un solo bloque. 
 
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
# pir√°mide. 
 
#       Ejemplos: 
# contar_bloques(1)   ‚Üí 1         (1) 
# contar_bloques(2)   ‚Üí 3         (2 + 1) 
# contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1) 

def contar_bloques(n):
    """
    Calcula el total de bloques necesarios para construir una pir√°mide
    de forma recursiva.

    La pir√°mide tiene 'n' bloques en el nivel m√°s bajo,
    (n-1) en el siguiente, y as√≠ sucesivamente hasta 1 bloque en el √∫ltimo nivel.

    Args:
        n (int): El n√∫mero de bloques en el nivel m√°s bajo (debe ser un entero positivo).

    Returns:
        int: El total de bloques en la pir√°mide.
             Retorna None si la entrada no es v√°lida (no es un entero positivo).
    """
    # Manejo de entradas no v√°lidas (solo n√∫meros positivos):
    if n <= 0: # El nivel m√°s bajo debe tener al menos 1 bloque
        print("Error: El n√∫mero de bloques en el nivel m√°s bajo debe ser un entero positivo.")
        return None

    # CASO BASE:
    # Si el n√∫mero de bloques en el nivel actual es 1, ese es el √∫ltimo nivel.
    if n == 1:
        return 1

    # PASO RECURSIVO:
    # El total de bloques es el n√∫mero de bloques en el nivel actual (n)
    # m√°s el total de bloques de la pir√°mide que se construye a partir del nivel (n-1).
    return n + contar_bloques(n - 1)

def probar_contar_bloques():
    """
    Pide al usuario el n√∫mero de bloques en el nivel m√°s bajo de la pir√°mide
    y luego calcula y muestra el total de bloques utilizando la funci√≥n recursiva.
    """
    print("Vamos a calcular el total de bloques necesarios para una pir√°mide.")
    print("En el nivel m√°s bajo hay 'n' bloques, luego 'n-1', y as√≠ hasta 1.")

    while True: # Bucle para asegurar una entrada v√°lida
        try:
            num_base = int(input("\nIngresa el n√∫mero de bloques en el nivel m√°s bajo (un entero positivo): "))
            if num_base <= 0:
                print("El n√∫mero de bloques en la base debe ser un entero positivo (mayor que 0).")
            else:
                break # Salimos del bucle si el n√∫mero es v√°lido
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    print(f"\nCalculando el total de bloques para una pir√°mide con {num_base} bloques en la base...\n")

    # Llamamos a nuestra funci√≥n recursiva
    total_bloques = contar_bloques(num_base)

    # Mostramos el resultado si la funci√≥n no retorn√≥ None (por error de entrada)
    if total_bloques is not None:
        print(f"El total de bloques necesarios para la pir√°mide es: {total_bloques}")
    else:
        print("No se pudo calcular el total de bloques debido a una entrada no compatible.")

# Ejecutamos la funci√≥n principal para probar el conteo de bloques
probar_contar_bloques()

# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
# aparece ese d√≠gito dentro del n√∫mero. 
#       Ejemplos: 
# contar_digito(12233421, 2)   ‚Üí 3   
# contar_digito(5555, 5)       ‚Üí 4   


def contar_digito(numero, digito):
    """
    Cuenta cu√°ntas veces aparece un d√≠gito espec√≠fico dentro de un n√∫mero entero positivo,
    utilizando un enfoque recursivo.

    Restricciones:
    - No se convierte el n√∫mero a string.
    - Se usan operaciones matem√°ticas (%, //) y recursi√≥n.
    - No se usa isinstance.

    Args:
        numero (int): El n√∫mero entero positivo donde buscar.
        digito (int): El d√≠gito a buscar (entre 0 y 9).

    Returns:
        int: La cantidad de veces que el d√≠gito aparece en el n√∫mero.
             Retorna None si las entradas no son v√°lidas
             (ej. numero negativo, digito fuera de rango 0-9).
    """
    # Manejo de entradas no v√°lidas (sin isinstance):
    # Asumimos que 'numero' es un entero por el manejo en la funci√≥n principal.
    if numero < 0:
        print("Error: El n√∫mero debe ser un entero positivo.")
        return None
    # Asumimos que 'digito' es un entero por el manejo en la funci√≥n principal.
    if not (0 <= digito <= 9):
        print("Error: El d√≠gito a buscar debe estar entre 0 y 9.")
        return None

    # CASO BASE:
    # Si el n√∫mero se ha reducido a 0, ya no hay m√°s d√≠gitos que contar.
    if numero == 0:
        return 0

    # PASO RECURSIVO:
    # 1. Obtener el √∫ltimo d√≠gito del n√∫mero actual.
    ultimo_digito = numero % 10

    # 2. Contar si el √∫ltimo d√≠gito coincide con el d√≠gito buscado.
    conteo_actual = 0
    if ultimo_digito == digito:
        conteo_actual = 1

    # 3. Preparar el n√∫mero para la siguiente llamada recursiva (sin el √∫ltimo d√≠gito).
    numero_restante = numero // 10

    # Sumar el conteo del d√≠gito actual m√°s el resultado de la llamada recursiva
    # con el resto del n√∫mero.
    return conteo_actual + contar_digito(numero_restante, digito)

# Parte 2: Probar la funci√≥n en un algoritmo general

def probar_contar_digito():
    """
    Pide al usuario un n√∫mero y un d√≠gito, y luego cuenta cu√°ntas veces
    aparece ese d√≠gito en el n√∫mero utilizando la funci√≥n recursiva.
    """
    print("Vamos a contar cu√°ntas veces aparece un d√≠gito en un n√∫mero.")

    # Solicitar el n√∫mero al usuario
    while True:
        try:
            num = int(input("\nIngresa un n√∫mero entero positivo: "))
            if num < 0:
                print("Por favor, ingresa un n√∫mero positivo.")
            else:
                break
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un n√∫mero entero.")

    # Solicitar el d√≠gito a buscar al usuario
    while True:
        try:
            d = int(input("Ingresa el d√≠gito que quieres buscar (0-9): "))
            if not (0 <= d <= 9):
                print("Por favor, ingresa un d√≠gito entre 0 y 9.")
            else:
                break
        except ValueError:
            print("Entrada no v√°lida. Por favor, ingresa un d√≠gito entero.")

    print(f"\nBuscando el d√≠gito '{d}' en el n√∫mero '{num}'...\n")

    # Llamamos a nuestra funci√≥n recursiva
    frecuencia = contar_digito(num, d)

    # Mostramos el resultado
    if frecuencia is not None: # Si la funci√≥n no retorn√≥ None (por error en la funci√≥n)
        print(f"El d√≠gito '{d}' aparece {frecuencia} veces en el n√∫mero {num}.")
    else:
        print("No se pudo realizar el conteo debido a una entrada no compatible en la funci√≥n recursiva.")

# Ejecutamos la funci√≥n principal para probar el conteo de d√≠gitos
# Aseg√∫rate de que esta l√≠nea NO est√© comentada para ejecutar el c√≥digo.
probar_contar_digito()